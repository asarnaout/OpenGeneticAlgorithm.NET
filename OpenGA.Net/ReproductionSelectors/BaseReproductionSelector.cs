namespace OpenGA.Net.ReproductionSelectors;

public abstract class BaseReproductionSelector<T>
{
    internal float SelectorWeight;

    protected internal abstract IEnumerable<Couple<T>> SelectMatingPairs(Chromosome<T>[] population, Random random, int minimumNumberOfCouples);

    internal virtual IEnumerable<Couple<T>> CreateStochasticCouples(IList<Chromosome<T>> candidates, Random random, int minimumNumberOfCouples, Func<WeightedRouletteWheel<Chromosome<T>>> rouletteWheelBuilder)
    {
        if (candidates.Count <= 1)
        {
            yield break;
        }

        candidates = [.. candidates.OrderBy(x => random.Next())];

        for (var i = 0; i < minimumNumberOfCouples; i++)
        {
            var rouletteWheel = rouletteWheelBuilder();

            var winner1 = rouletteWheel.SpinAndReadjustWheel();
            var winner2 = rouletteWheel.SpinAndReadjustWheel();

            yield return Couple<T>.Pair(winner1, winner2);
        }
    }

    internal virtual IEnumerable<Couple<T>> GenerateCouplesFromATwoIndividualPopulation(IList<Chromosome<T>> candidates, int minimumNumberOfCouples)
    {
        for (var i = 0; i < minimumNumberOfCouples; i++)
        {
            yield return Couple<T>.Pair(candidates[0], candidates[1]);
        }
    }

    /// <summary>
    /// Call this function only if when using multiple reproduction selectors. By setting a weight value between 
    /// 0 and 1, the caller will influence the number of offspring generated by this reproductive selector relative 
    /// to the other chosen selectors. For example, if Selector A is assigned a weight of 0.7 while Selector B is 
    /// assigned a weight of 0.3 then Selector A will mate up to 40% more chromosome couples than Selector B.
    /// 
    /// Note: All weight values will be automatically normalized to a sum of 1. Therefore if Selector A is assigned
    /// a weight of 0.75 while selector B is assigned a weight of 0.5, then both values are normalized to 0.6 and 
    /// 0.4 respectively.
    /// 
    /// Note: If no weight values are assigned to any of the reproductive selectors, then none of them will have
    /// a weight advantage relative to the other.
    /// 
    /// Note that by calling this method on one selector, you must call it on all other selectors, otherwise a 
    /// <see cref="NullifyingRelativeWeightException">NullifyingRelativeWeightException</see> will be thrown.
    /// 
    /// </summary>
    /// <param name="value">A value between 0 and 1 controlling the emphasis of this selector compared to others.</param>
    public BaseReproductionSelector<T> Weight(float value)
    {
        if (value <= 0 || value > 1)
        {
            throw new ArgumentOutOfRangeException(nameof(value), "Value must be greater than 0 and less than or equal to 1.");
        }

        SelectorWeight = value;

        return this;
    }
}
